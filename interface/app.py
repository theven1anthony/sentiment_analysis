"""
Interface Streamlit pour l'analyse de sentiment Air Paradis.
Permet de tester l'API de pr√©diction et de donner du feedback.
"""

import os
import streamlit as st
import requests
from datetime import datetime

# Configuration de la page
st.set_page_config(
    page_title="Air Paradis - Analyse de Sentiment",
    page_icon="‚úàÔ∏è",
    layout="wide"
)

# Configuration de l'API
# Par d√©faut : serveur de production Azure
# Variable d'environnement API_URL pour override (Docker ou d√©veloppement local)
default_api_url = os.getenv("API_URL", "https://sentiment-api-at2025.azurewebsites.net")
API_URL = st.sidebar.text_input(
    "URL de l'API",
    value=default_api_url,
    help="URL de base de l'API FastAPI (production Azure par d√©faut)"
)

# Titre principal
st.title("‚úàÔ∏è Air Paradis - Analyse de Sentiment")
st.markdown("Interface de test pour l'analyse de sentiment des tweets")

# √âtat de l'API
st.sidebar.header("√âtat de l'API")
try:
    response = requests.get(f"{API_URL}/health", timeout=2)
    if response.status_code == 200:
        health_data = response.json()
        st.sidebar.success("‚úì API op√©rationnelle")

        if health_data.get("model_loaded"):
            st.sidebar.info(f"üìä Mod√®le: {health_data.get('model_type', 'unknown')}")

            # R√©cup√©rer les informations du mod√®le
            try:
                model_info_response = requests.get(f"{API_URL}/model/info", timeout=2)
                if model_info_response.status_code == 200:
                    model_info = model_info_response.json()
                    st.sidebar.metric("F1-Score", f"{model_info.get('f1_score', 0):.4f}")
                    st.sidebar.metric("Accuracy", f"{model_info.get('accuracy', 0):.4f}")
                    st.sidebar.caption(f"Technique: {model_info.get('technique', 'N/A')}")
            except Exception:
                pass
        else:
            st.sidebar.warning("‚ö†Ô∏è Mod√®le non charg√©")
    else:
        st.sidebar.error("‚úó API inaccessible")
except Exception as e:
    st.sidebar.error("‚úó API inaccessible")
    st.sidebar.caption(f"Erreur: {str(e)}")

# S√©parateur
st.markdown("---")

# Section 1: Pr√©diction
st.header("1Ô∏è‚É£ Analyser un tweet")

col1, col2 = st.columns([2, 1])

with col1:
    # Textarea pour le texte
    text_input = st.text_area(
        "Texte √† analyser",
        height=150,
        placeholder="Exemple: I love flying with Air Paradis! Best airline ever!",
        help="Entrez le texte d'un tweet √† analyser (en anglais de pr√©f√©rence)"
    )

    # Bouton de pr√©diction
    predict_button = st.button("üîç Analyser le sentiment", type="primary", use_container_width=True)

with col2:
    st.info("""
    **Instructions:**

    1. Entrez un texte de tweet
    2. Cliquez sur "Analyser"
    3. Consultez les r√©sultats
    4. Donnez votre feedback si n√©cessaire
    """)

# Gestion de la pr√©diction
if predict_button:
    if not text_input or len(text_input.strip()) == 0:
        st.error("‚ö†Ô∏è Veuillez entrer un texte √† analyser")
    else:
        try:
            # Appel √† l'API de pr√©diction
            with st.spinner("Analyse en cours..."):
                response = requests.post(
                    f"{API_URL}/predict",
                    json={"text": text_input},
                    timeout=10
                )

            if response.status_code == 200:
                prediction_data = response.json()

                # Stocker les donn√©es de pr√©diction dans la session
                st.session_state.last_prediction = prediction_data
                st.session_state.last_text = text_input

                # Affichage des r√©sultats
                st.success("‚úì Analyse termin√©e")

                # Metrics en colonnes
                metric_col1, metric_col2, metric_col3 = st.columns(3)

                sentiment = prediction_data.get("sentiment")
                confidence = prediction_data.get("confidence", 0)

                with metric_col1:
                    sentiment_label = "üòä Positif" if sentiment == 1 else "üòû N√©gatif"
                    sentiment_color = "üü¢" if sentiment == 1 else "üî¥"
                    st.metric("Sentiment", sentiment_label, delta=sentiment_color)

                with metric_col2:
                    st.metric("Confiance", f"{confidence:.1%}")
                    st.progress(confidence)

                with metric_col3:
                    st.metric("ID Pr√©diction", prediction_data.get("prediction_id", "N/A"))

                # D√©tails suppl√©mentaires
                with st.expander("üìã D√©tails de la pr√©diction"):
                    st.json(prediction_data)

            else:
                st.error(f"‚ùå Erreur API: {response.status_code}")
                st.text(response.text)

        except requests.exceptions.Timeout:
            st.error("‚è±Ô∏è Timeout: L'API met trop de temps √† r√©pondre")
        except requests.exceptions.ConnectionError:
            st.error("üîå Erreur de connexion: Impossible de joindre l'API")
        except Exception as e:
            st.error(f"‚ùå Erreur: {str(e)}")

# S√©parateur
st.markdown("---")

# Section 2: Feedback
st.header("2Ô∏è‚É£ Donner un feedback")

# V√©rifier s'il y a une pr√©diction en cours
if "last_prediction" in st.session_state and st.session_state.last_prediction:
    prediction_data = st.session_state.last_prediction

    st.info(f"""
    **Pr√©diction en cours:**
    - Texte: "{st.session_state.last_text[:100]}{'...' if len(st.session_state.last_text) > 100 else ''}"
    - Sentiment pr√©dit: {"Positif" if prediction_data.get("sentiment") == 1 else "N√©gatif"}
    - Confiance: {prediction_data.get("confidence", 0):.1%}
    """)

    # Formulaire de feedback
    with st.form("feedback_form"):
        st.subheader("La pr√©diction est-elle correcte ?")

        # Radio button pour le sentiment r√©el
        actual_sentiment = st.radio(
            "Quel est le sentiment r√©el de ce texte ?",
            options=[0, 1],
            format_func=lambda x: "üòû N√©gatif" if x == 0 else "üòä Positif",
            horizontal=True
        )

        # Bouton de soumission
        submit_feedback = st.form_submit_button("üì§ Envoyer le feedback", type="primary", use_container_width=True)

        if submit_feedback:
            try:
                # Appel √† l'API de feedback
                with st.spinner("Envoi du feedback..."):
                    feedback_response = requests.post(
                        f"{API_URL}/feedback",
                        json={
                            "text": st.session_state.last_text,
                            "predicted_sentiment": prediction_data.get("sentiment"),
                            "actual_sentiment": actual_sentiment,
                            "prediction_id": prediction_data.get("prediction_id"),
                            "timestamp": datetime.now().isoformat()
                        },
                        timeout=10
                    )

                if feedback_response.status_code == 200:
                    feedback_data = feedback_response.json()

                    st.success(f"‚úì {feedback_data.get('message', 'Feedback enregistr√©')}")

                    # Afficher une alerte si d√©clench√©e
                    if feedback_data.get("alert_triggered"):
                        st.error(f"""
                        üö® **ALERTE D√âCLENCH√âE**

                        {feedback_data.get('misclassified_count', 0)} erreurs d√©tect√©es en 5 minutes.
                        Le mod√®le pourrait n√©cessiter une r√©√©valuation.
                        """)
                    else:
                        misclassified_count = feedback_data.get('misclassified_count', 0)
                        if misclassified_count > 0:
                            st.warning(f"‚ö†Ô∏è {misclassified_count} erreur(s) d√©tect√©e(s) dans les 5 derni√®res minutes (seuil: 3)")

                    # Nettoyer la session
                    if "last_prediction" in st.session_state:
                        del st.session_state.last_prediction
                    if "last_text" in st.session_state:
                        del st.session_state.last_text

                    st.rerun()

                else:
                    st.error(f"‚ùå Erreur API: {feedback_response.status_code}")
                    st.text(feedback_response.text)

            except requests.exceptions.Timeout:
                st.error("‚è±Ô∏è Timeout: L'API met trop de temps √† r√©pondre")
            except requests.exceptions.ConnectionError:
                st.error("üîå Erreur de connexion: Impossible de joindre l'API")
            except Exception as e:
                st.error(f"‚ùå Erreur: {str(e)}")

else:
    st.info("‚ÑπÔ∏è Aucune pr√©diction en cours. Analysez d'abord un texte pour pouvoir donner un feedback.")

# S√©parateur
st.markdown("---")

# Footer
st.caption("""
**Air Paradis - Analyse de Sentiment** | Projet MLOps OpenClassrooms

Documentation API: [Production Azure](https://sentiment-api-at2025.azurewebsites.net/docs) | [Local](http://localhost:8000/docs)
""")