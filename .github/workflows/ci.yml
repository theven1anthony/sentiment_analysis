name: CI - Tests et Qualité

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Tests et Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Téléchargement NLTK
        run: |
          python -c "import nltk; nltk.download('punkt_tab'); nltk.download('stopwords'); nltk.download('wordnet')"

      - name: Tests unitaires
        run: |
          pytest tests/ -v --tb=short || echo "⚠️ Certains tests ont échoué"
        continue-on-error: true

      - name: Vérification du formatage (Black)
        run: |
          black --check src/ api/ || echo "⚠️ Formatage non conforme détecté"
        continue-on-error: true

      - name: Linting (Flake8)
        run: |
          flake8 src/ api/ --max-line-length=120 --exclude=venv,__pycache__,.git --extend-ignore=E203,W503 || echo "⚠️ Problèmes de linting détectés"
        continue-on-error: true

  docker-build:
    name: Build et Test Docker
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build de l'image Docker
        run: |
          docker build -t sentiment-api:test .

      - name: Test des dépendances
        run: |
          docker run --rm sentiment-api:test python -c "
          import sys
          import tensorflow as tf
          import fastapi
          import numpy
          import nltk
          print('✅ TensorFlow:', tf.__version__)
          print('✅ NumPy:', numpy.__version__)
          print('✅ FastAPI: OK')
          print('✅ NLTK: OK')
          print('✅ Dependencies validation passed')
          "

      - name: Health check API
        run: |
          docker run -d --name test-api -p 8000:8000 \
            -e MODEL_NAME=test_model \
            sentiment-api:test \
            uvicorn api.main:app --host 0.0.0.0 --port 8000
          sleep 10
          curl -f http://localhost:8000/ || (docker logs test-api && exit 1)
          docker stop test-api
          docker rm test-api

  summary:
    name: Résumé CI
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()

    steps:
      - name: Statut du pipeline
        run: |
          echo "## 📋 Résumé du Pipeline CI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tests** : ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Build** : ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "Branche: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY