name: CD - D√©ploiement AWS

on:
  push:
    branches: [main]
  workflow_dispatch:  # Permet d√©clenchement manuel

env:
  AWS_REGION: eu-west-1  # √Ä adapter selon votre r√©gion
  EB_APPLICATION_NAME: sentiment-analysis-api
  EB_ENVIRONMENT_NAME: sentiment-analysis-api-prod
  DEPLOY_PACKAGE_NAME: deploy-${{ github.sha }}.zip

jobs:
  deploy:
    name: D√©ploiement sur AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    # Ne d√©ploie que si les tests CI passent
    needs: []  # Ajouter needs: [ci] si vous voulez attendre CI d'abord

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pr√©paration du package de d√©ploiement
        run: |
          # Copier uniquement les fichiers n√©cessaires
          mkdir -p deploy-package

          # Code source
          cp -r api deploy-package/
          cp -r src deploy-package/

          # Configuration
          cp Dockerfile deploy-package/
          cp requirements.txt deploy-package/
          cp .env.example deploy-package/.env

          # Configuration Elastic Beanstalk
          mkdir -p deploy-package/.ebextensions
          cp -r .ebextensions/* deploy-package/.ebextensions/ 2>/dev/null || true

          # Cr√©er le README de d√©ploiement
          echo "D√©ploiement: $(date)" > deploy-package/DEPLOYMENT_INFO.txt
          echo "Commit: ${{ github.sha }}" >> deploy-package/DEPLOYMENT_INFO.txt
          echo "Branch: ${{ github.ref_name }}" >> deploy-package/DEPLOYMENT_INFO.txt

          # Cr√©er le ZIP
          cd deploy-package
          zip -r ../${{ env.DEPLOY_PACKAGE_NAME }} . -x "*.git*" "*.pytest_cache*" "__pycache__*"
          cd ..

      - name: Upload vers S3
        run: |
          aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} \
            s3://${{ env.EB_APPLICATION_NAME }}-deployments/${{ env.DEPLOY_PACKAGE_NAME }}

      - name: Cr√©ation de la version EB
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --version-label ${{ github.sha }} \
            --description "Commit ${{ github.sha }} sur ${{ github.ref_name }}" \
            --source-bundle S3Bucket="${{ env.EB_APPLICATION_NAME }}-deployments",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
            --region ${{ env.AWS_REGION }}

      - name: D√©ploiement sur EB
        run: |
          aws elasticbeanstalk update-environment \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
            --version-label ${{ github.sha }} \
            --region ${{ env.AWS_REGION }}

      - name: Attente du d√©ploiement
        run: |
          echo "‚è≥ Attente de la fin du d√©ploiement..."
          aws elasticbeanstalk wait environment-updated \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
            --region ${{ env.AWS_REGION }}

      - name: V√©rification du Health Check
        run: |
          ENDPOINT=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Environments[0].CNAME' \
            --output text)

          echo "üåê API URL: http://$ENDPOINT"

          # Test du endpoint /health
          for i in {1..5}; do
            if curl -f "http://$ENDPOINT/health"; then
              echo "‚úÖ Health check r√©ussi"
              exit 0
            fi
            echo "‚è≥ Tentative $i/5..."
            sleep 10
          done

          echo "‚ùå Health check √©chou√©"
          exit 1

      - name: R√©sum√© du d√©ploiement
        if: always()
        run: |
          ENDPOINT=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Environments[0].CNAME' \
            --output text)

          echo "## üöÄ D√©ploiement AWS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application**: ${{ env.EB_APPLICATION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environnement**: ${{ env.EB_ENVIRONMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**R√©gion**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL de l'API**: http://$ENDPOINT" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check**: http://$ENDPOINT/health" >> $GITHUB_STEP_SUMMARY
          echo "**Documentation**: http://$ENDPOINT/docs" >> $GITHUB_STEP_SUMMARY

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Notification de succ√®s
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ D√©ploiement r√©ussi sur AWS Elastic Beanstalk"

      - name: Notification d'√©chec
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå √âchec du d√©ploiement"
          exit 1