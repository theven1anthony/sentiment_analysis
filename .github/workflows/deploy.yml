name: CD - D√©ploiement Azure

on:
  push:
    branches: [main]
  workflow_dispatch:  # Permet d√©clenchement manuel

env:
  AZURE_WEBAPP_NAME: sentiment-api-at2025
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.12'

jobs:
  deploy:
    name: D√©ploiement sur Azure App Service
    runs-on: ubuntu-latest
    # Ne d√©ploie que si les tests CI passent
    needs: []  # Ajouter needs: [ci] si vous voulez attendre CI d'abord

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Installation des d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt

      - name: Pr√©paration du package de d√©ploiement
        run: |
          # Cr√©er le dossier de d√©ploiement
          mkdir -p deploy-package

          # Copier les fichiers n√©cessaires
          cp -r api deploy-package/
          cp -r src deploy-package/
          cp -r models deploy-package/
          cp requirements-api.txt deploy-package/requirements.txt

          # Cr√©er le fichier de d√©marrage pour Azure
          # Azure cherche startup.txt ou utilise gunicorn par d√©faut
          echo "gunicorn --bind=0.0.0.0 --timeout 600 api.main:app --worker-class uvicorn.workers.UvicornWorker" > deploy-package/startup.txt

          # Cr√©er le README de d√©ploiement
          echo "D√©ploiement: $(date)" > deploy-package/DEPLOYMENT_INFO.txt
          echo "Commit: ${{ github.sha }}" >> deploy-package/DEPLOYMENT_INFO.txt
          echo "Branch: ${{ github.ref_name }}" >> deploy-package/DEPLOYMENT_INFO.txt

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: D√©ploiement sur Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ./deploy-package

      - name: Configuration des variables d'environnement Azure
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          app-settings-json: >-
            [
              {
                "name": "MODEL_PATH",
                "value": "./models/production/pyfunc_model/model",
                "slotSetting": false
              },
              {
                "name": "WEBSITES_PORT",
                "value": "8000",
                "slotSetting": false
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "true",
                "slotSetting": false
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}",
                "slotSetting": false
              }
            ]

      - name: Configuration du startup command
        run: |
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --startup-file "gunicorn --bind=0.0.0.0 --timeout 600 api.main:app --worker-class uvicorn.workers.UvicornWorker"

      - name: Attente du d√©marrage de l'application
        run: |
          echo "‚è≥ Attente du d√©marrage de l'application..."
          sleep 30

      - name: V√©rification du Health Check
        run: |
          ENDPOINT="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"

          echo "üåê API URL: $ENDPOINT"

          # Test du endpoint /health
          for i in {1..10}; do
            if curl -f "$ENDPOINT/health"; then
              echo "‚úÖ Health check r√©ussi"
              exit 0
            fi
            echo "‚è≥ Tentative $i/10..."
            sleep 15
          done

          echo "‚ùå Health check √©chou√©"
          exit 1

      - name: R√©sum√© du d√©ploiement
        if: always()
        run: |
          ENDPOINT="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"

          echo "## üöÄ D√©ploiement Azure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application**: ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group**: ${{ secrets.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL de l'API**: $ENDPOINT" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check**: $ENDPOINT/health" >> $GITHUB_STEP_SUMMARY
          echo "**Documentation**: $ENDPOINT/docs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application Insights**: [Voir les logs](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/microsoft.insights/components/sentiment-api-insights/overview)" >> $GITHUB_STEP_SUMMARY

      - name: Azure Logout
        if: always()
        run: az logout

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Notification de succ√®s
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ D√©ploiement r√©ussi sur Azure App Service"
          echo "üåê URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"

      - name: Notification d'√©chec
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå √âchec du d√©ploiement"
          echo "Consultez les logs Azure pour plus de d√©tails"
          exit 1